<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title><%- htmlWebpackPlugin.options.metadata.title %></title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <base href="<%- htmlWebpackPlugin.options.metadata.baseUrl %>">
    <style type="text/css">
      /* Styles used for the initial splash screen */
      .splash {
        text-align: center;
        margin: 10% 0 0 0;
        box-sizing: border-box;
      }
      .splash .message {
        font-size: 72px;
        line-height: 72px;
        text-shadow: rgba(0, 0, 0, 0.5) 0 0 15px;
        text-transform: uppercase;
        font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
      }
      .splash .fa-spinner {
        text-align: center;
        display: inline-block;
        font-size: 72px;
        margin-top: 50px;
      }
      .fa-spinner-svg:before {
        content: url('data:image/svg+xml; utf8, <svg viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M526 1394q0 53-37.5 90.5t-90.5 37.5q-52 0-90-38t-38-90q0-53 37.5-90.5t90.5-37.5 90.5 37.5 37.5 90.5zm498 206q0 53-37.5 90.5t-90.5 37.5-90.5-37.5-37.5-90.5 37.5-90.5 90.5-37.5 90.5 37.5 37.5 90.5zm-704-704q0 53-37.5 90.5t-90.5 37.5-90.5-37.5-37.5-90.5 37.5-90.5 90.5-37.5 90.5 37.5 37.5 90.5zm1202 498q0 52-38 90t-90 38q-53 0-90.5-37.5t-37.5-90.5 37.5-90.5 90.5-37.5 90.5 37.5 37.5 90.5zm-964-996q0 66-47 113t-113 47-113-47-47-113 47-113 113-47 113 47 47 113zm1170 498q0 53-37.5 90.5t-90.5 37.5-90.5-37.5-37.5-90.5 37.5-90.5 90.5-37.5 90.5 37.5 37.5 90.5zm-640-704q0 80-56 136t-136 56-136-56-56-136 56-136 136-56 136 56 56 136zm530 206q0 93-66 158.5t-158 65.5q-93 0-158.5-65.5t-65.5-158.5q0-92 65.5-158t158.5-66q92 0 158 66t66 158z"/></svg>');
      }
      .fa-2x {
        width: 32px;
        height: 32px;
      }
      .fa-4x {
        width: 64px;
        height: 64px;
      }
      .fa {
        display: inline-block;
        font: normal normal normal 14px/1 FontAwesome;
        font-size: inherit;
        text-rendering: auto;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
      }
      .fa-spin {
        -webkit-animation: fa-spin 2s infinite linear;
        animation: fa-spin 2s infinite linear;
      }
      @-webkit-keyframes fa-spin {
        0% {
          -webkit-transform: rotate(0deg);
          transform: rotate(0deg);
        }
        100% {
          -webkit-transform: rotate(359deg);
          transform: rotate(359deg);
        }
      }
      @keyframes fa-spin {
        0% {
          -webkit-transform: rotate(0deg);
          transform: rotate(0deg);
        }
        100% {
          -webkit-transform: rotate(359deg);
          transform: rotate(359deg);
        }
      }
    </style>
    <!-- imported CSS are concatenated and added automatically -->
  </head>
  <body aurelia-app="main">
    <div class="splash">
      <div class="message"><%- htmlWebpackPlugin.options.metadata.title %></div>
      <i class="fa fa-spinner-svg fa-spin fa-4x"></i>
    </div>
    <script>
      /*! loadCSS rel=preload polyfill. [c]2017 Filament Group, Inc. MIT License */
      (function( w ){
        "use strict";
        // rel=preload support test
        if( !w.loadCSS ){
          w.loadCSS = function(){};
        }
        // define on the loadCSS obj
        var rp = loadCSS.relpreload = {};
        // rel=preload feature support test
        // runs once and returns a function for compat purposes
        rp.support = (function(){
          var ret;
          try {
            ret = w.document.createElement( "link" ).relList.supports( "preload" );
          } catch (e) {
            ret = false;
          }
          return function(){
            return ret;
          };
        })();
      
        // if preload isn't supported, get an asynchronous load by using a non-matching media attribute
        // then change that media back to its intended value on load
        rp.bindMediaToggle = function( link ){
          // remember existing media attr for ultimate state, or default to 'all'
          var finalMedia = link.media || "all";
      
          function enableStylesheet(){
            link.media = finalMedia;
          }
      
          // bind load handlers to enable media
          if( link.addEventListener ){
            link.addEventListener( "load", enableStylesheet );
          } else if( link.attachEvent ){
            link.attachEvent( "onload", enableStylesheet );
          }
      
          // Set rel and non-applicable media type to start an async request
          // note: timeout allows this to happen async to let rendering continue in IE
          setTimeout(function(){
            link.rel = "stylesheet";
            link.media = "only x";
          });
          // also enable media after 3 seconds,
          // which will catch very old browsers (android 2.x, old firefox) that don't support onload on link
          setTimeout( enableStylesheet, 3000 );
        };
      
        // loop through link elements in DOM
        rp.poly = function(){
          // double check this to prevent external calls from running
          if( rp.support() ){
            return;
          }
          var links = w.document.getElementsByTagName( "link" );
          for( var i = 0; i < links.length; i++ ){
            var link = links[ i ];
            // qualify links to those with rel=preload and as=style attrs
            if( link.rel === "preload" && link.getAttribute( "as" ) === "style" && !link.getAttribute( "data-loadcss" ) ){
              // prevent rerunning on link
              link.setAttribute( "data-loadcss", true );
              // bind listeners to toggle media back
              rp.bindMediaToggle( link );
            }
          }
        };
      
        // if unsupported, run the polyfill
        if( !rp.support() ){
          console.log('using loadCSS rel=preload polyfill');
          // run once at least
          rp.poly();
      
          // rerun poly on an interval until onload
          var run = w.setInterval( rp.poly, 500 );
          if( w.addEventListener ){
            w.addEventListener( "load", function(){
              rp.poly();
              w.clearInterval( run );
            } );
          } else if( w.attachEvent ){
            w.attachEvent( "onload", function(){
              rp.poly();
              w.clearInterval( run );
            } );
          }
        }
      
      
        // commonjs
        if( typeof exports !== "undefined" ){
          exports.loadCSS = loadCSS;
        }
        else {
          w.loadCSS = loadCSS;
        }
      }( typeof global !== "undefined" ? global : this ) );
    </script>
  </body>
</html>
